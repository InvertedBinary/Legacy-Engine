package com.IB.SL.level.worlds;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.IB.SL.Boot;
import com.IB.SL.Game;
import com.IB.SL.entity.mob.Player;
import com.IB.SL.entity.mob.peaceful.Guard;
import com.IB.SL.entity.mob.peaceful.Horse;
import com.IB.SL.graphics.SpriteSheet;
import com.IB.SL.level.Level;
import com.IB.SL.level.TileCoord;
import com.IB.SL.level.interactables.Location_Shrine;
import com.IB.SL.level.interactables.Teleporter;
import com.IB.SL.util.Sound;

public class XML_Level extends Level{
		
	/**
	 * 
	 */

	public static boolean spawnASM = false;

	protected static java.util.Random Random = new Random();
	public static java.util.Random random = Random;
	//protected static Random randomYRandom = new Random();
	//public static int randomY = randomYRandom.nextInt(1 + 4);

	public XML_Level(String XML) {
		super(XML);
		readXML(XML);
	}
	
	public void readXML(String path) {
		this.XML_String = path;
		try {
		InputStream fXmlFile = getClass().getResourceAsStream(path);
		DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFac.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);
		
		doc.getDocumentElement().normalize();
		
		System.out.println("ROOT: " + doc.getDocumentElement().getNodeName());
		
		initMob(doc);
		initSprite(doc);
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void initMob(Document doc) {
		NodeList nList = doc.getElementsByTagName("mob");
		System.out.println("----------------------------");
		for (int temp = 0; temp < nList.getLength(); temp++) {
			Node nNode = nList.item(temp);
			System.out.println("\nCurrent Element :" + nNode.getNodeName());
			if (nNode.getNodeType() == Node.ELEMENT_NODE) {
				Element eElement = (Element) nNode;
				
				try {
			this.id = Integer.parseInt(eElement.getAttribute("id"));
			this.name = (eElement.getElementsByTagName("name").item(0).getTextContent());
			this.speed = Double.parseDouble(eElement.getElementsByTagName("speed").item(0).getTextContent());
			this.maxhealth = Double.parseDouble(eElement.getElementsByTagName("maxhealth").item(0).getTextContent());
			this.mobhealth = maxhealth;
			this.rarity = Integer.parseInt(eElement.getElementsByTagName("rarity").item(0).getTextContent());
			this.Exp = Integer.parseInt(eElement.getElementsByTagName("exp").item(0).getTextContent());
				} catch (Exception e) {
				}
			}
		}
	}
	
	
	protected void loadLevel(String path) {
		minimap_enabled  = true;
		Overworld  = true;
		SpawnList.clear();
		
		SpawnTime_MOD = 150;
		
		try {
			BufferedImage image = ImageIO.read(XML_Level.class.getResource(path));
			System.out.println("Overlay Path: " + "/overlays" + path);
			int w = width = image.getWidth();
			int h = height = image.getHeight();

			tiles = new int[w * h];
			image.getRGB(0, 0, w, h, tiles, 0, w);
		}catch (IOException e) {	
			e.printStackTrace();
			System.out.println("IOException! Failed To Load Level File!");
		}
		
		try {
			BufferedImage overlayImage = ImageIO.read(XML_Level.class.getResource("/overlays" + path));  			int overlayW = width = overlayImage.getWidth();
			int overlayH = height = overlayImage.getHeight();
			overlayTiles = new int[overlayW * overlayH];
			torchTiles = new int[overlayW * overlayH];
			overlayImage.getRGB(0,0,overlayW,overlayH,overlayTiles,0,overlayW);
			overlayImage.getRGB(0,0, overlayW, overlayH, torchTiles, 0, overlayW);
			System.out.println("Loaded Overlays");
		} catch (IOException e) {
			System.out.println("Failed To Load Torches");
		}
		add(new Location_Shrine(672, 227, new TileCoord(673, 228)));
	} 
	
	protected void generateLevel() {
		for (int y = 0; y < 64; y++) {
			for (int x = 0; x < 64; x++) {
				getTile(x, y);
				}
			}
		}
	
	public void checkExits(Player player, Level level, int x, int y, boolean e) {
		refresh();
		if (x == 729 && y == 362) {//296, 464 Spawn Haven
			player.setPosition(49, 55, Maps.dungeon1Id, true); 
			return;
		}
		
		if (x == 654 && y == 78 || x == 655 && y == 78) {//296, 464 Spawn Haven
			player.setPosition(177, 66, Maps.dungeon3Id, true); 
			return;
		}
		
		
		if (x == 401 && y == 735) {//296, 464 Spawn Haven
			player.setPosition(146, 155, Maps.dungeon2Id, true); 
			return;
		}
		
		if (x == 517 && y == 399) {
			player.setPosition(157, 65, Maps.dungeon4Id, true);
			return;
		}
		
		if ((y == 130 || y == 129) && (x == 837 || x == 838)) {
			player.setPosition(52, 78, Maps.IceHavenId, true);
			return;
		}
		
		if ((y == 389 || y == 390) && (x == 783 || x == 784)) {
			player.setPosition(35, 79, Maps.CaveHavenId, true);
			return;
		}
		
		if ((y == 439 || y == 440) && (x == 619 || x == 620 || x == 621)) {
			player.setPosition(52, 81, Maps.SandHavenId, true);
			return;
		}
		
		if ((y == 681 || y == 682) && (x == 606 || x == 607)) {
			player.setPosition(38, 74, Maps.RedTownHavenId, true);
			player.x += 8;
			return;
		}
		
		if ((y == 831 || y == 832) && (x == 237 || x == 238)) {
			player.setPosition(41, 75, Maps.SouthTownHavenId, true);
			return;
		}
		
	player.setPosition(52, 78, Maps.spawnHavenId, true); 
		
		}

	}
	


