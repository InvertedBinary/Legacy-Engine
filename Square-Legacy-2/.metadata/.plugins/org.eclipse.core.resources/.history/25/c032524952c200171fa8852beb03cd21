package com.IB.SL;

import static org.lwjgl.glfw.GLFW.GLFW_KEY_ESCAPE;
import static org.lwjgl.glfw.GLFW.GLFW_PRESS;
import static org.lwjgl.glfw.GLFW.glfwCreateWindow;
import static org.lwjgl.glfw.GLFW.glfwDestroyWindow;
import static org.lwjgl.glfw.GLFW.glfwGetTime;
import static org.lwjgl.glfw.GLFW.glfwInit;
import static org.lwjgl.glfw.GLFW.glfwMakeContextCurrent;
import static org.lwjgl.glfw.GLFW.glfwPollEvents;
import static org.lwjgl.glfw.GLFW.glfwSetErrorCallback;
import static org.lwjgl.glfw.GLFW.glfwSetKeyCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowShouldClose;
import static org.lwjgl.glfw.GLFW.glfwSwapBuffers;
import static org.lwjgl.glfw.GLFW.glfwTerminate;
import static org.lwjgl.glfw.GLFW.glfwWindowShouldClose;
import static org.lwjgl.system.MemoryUtil.NULL;

import java.util.Timer;

import org.lwjgl.Version;
import org.lwjgl.glfw.GLFWErrorCallback;
import org.lwjgl.glfw.GLFWKeyCallback;
import org.lwjgl.opengl.GL;

public class LWJGL {

	//TODO: Delete this class when done
	String title;
	private long window;
	private boolean running = false;
	private GLFWErrorCallback errorCallback = GLFWErrorCallback.createPrint(System.err);
	public static final int TARGET_FPS = 75;
	public static final int TARGET_UPS = 30;
	protected Timer timer;
	   
	public LWJGL(String title) {
		timer = new Timer();
		this.title = title;
        System.out.println("LWJGL Version " + Version.getVersion() + " is working.");
        glfwSetErrorCallback(errorCallback);
        
        if (!glfwInit()) {
        	System.out.println("GLFW Failed to initialize");
        }
        
        window = glfwCreateWindow(Game.width, Game.height, title, NULL, NULL);
        if (window == NULL) {
        	glfwTerminate();
        	throw new RuntimeException("GLFW Window failed to create");
        }
        
        glfwSetKeyCallback(window, keyCallback);
        glfwMakeContextCurrent(window);
        GL.createCapabilities();
        
        while(!glfwWindowShouldClose(window)) {
        	double time = glfwGetTime();
        	glfwSwapBuffers(window);
        	glfwPollEvents();
        }
        
	}
	
	private void end() {
        glfwDestroyWindow(window);
        keyCallback.free();
        glfwTerminate();
        errorCallback.free();
	}
	
	private GLFWKeyCallback keyCallback = new GLFWKeyCallback() {
	    @Override
	    public void invoke(long window, int key, int scancode, int action, int mods) {
	        if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
	            glfwSetWindowShouldClose(window, true);
	        }
	    }
	};
	
	public void gameLoop() {
	}
	

	public void start() {
	}
	
}