package com.IB.SL.entity.projectile;

import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.IB.SL.Boot;
import com.IB.SL.entity.Entity;
import com.IB.SL.entity.mob.Mob.DIRECTION;
import com.IB.SL.entity.mob.Player;
import com.IB.SL.graphics.AnimatedSprite;
import com.IB.SL.graphics.Screen;
import com.IB.SL.graphics.SpriteSheet;
import com.IB.SL.graphics.UI.GUI;

public class XML_Projectile extends Projectile {
	
	transient private GUI gui = new GUI();
	public String XML_String = "";
	
	public XML_Projectile(String XML) {
		readXML(XML);
	}
	
	public XML_Projectile(double x, double y, String XML) {
		readXML(XML);
		this.x = x * 16;
		this.y = y * 16;
	}
	
	public void readXML(String path) {
		this.XML_String = path;
		try {
		InputStream fXmlFile = getClass().getResourceAsStream(path);
		DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFac.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);
		
		doc.getDocumentElement().normalize();
		
		System.out.println("ROOT: " + doc.getDocumentElement().getNodeName());
		
		initMob(doc);
		initSprite(doc);
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void initMob(Document doc) {
		NodeList nList = doc.getElementsByTagName("mob");
		System.out.println("----------------------------");
		for (int temp = 0; temp < nList.getLength(); temp++) {
			Node nNode = nList.item(temp);
			System.out.println("\nCurrent Element :" + nNode.getNodeName());
			if (nNode.getNodeType() == Node.ELEMENT_NODE) {
				Element eElement = (Element) nNode;
				try {
					setProperties(eElement);
					} catch (Exception e) {
						e.printStackTrace();
				}
			}
		}
	}
	
	public void setProperties(Element eElement) {
		try {
		this.id = Integer.parseInt(eElement.getAttribute("id"));
		this.name = (eElement.getElementsByTagName("name").item(0).getTextContent());
		this.speed = Double.parseDouble(eElement.getElementsByTagName("speed").item(0).getTextContent());
		this.maxhealth = Double.parseDouble(eElement.getElementsByTagName("maxhealth").item(0).getTextContent());
		this.mobhealth = maxhealth;
		this.rarity = Integer.parseInt(eElement.getElementsByTagName("rarity").item(0).getTextContent());
		this.Exp = Integer.parseInt(eElement.getElementsByTagName("exp").item(0).getTextContent());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void initSprite(Document doc) {
		NodeList nList = doc.getElementsByTagName("sprite");
		for (int i = 0; i < nList.getLength(); i++) {
			Node nNode = nList.item(i);
			if (nNode.getNodeType() == Node.ELEMENT_NODE) {
				Element eElement = (Element) nNode;
				
				try {
				this.xOffset = Integer.parseInt(eElement.getAttribute("xOffset"));
				this.yOffset = Integer.parseInt(eElement.getAttribute("yOffset"));
				int size = Integer.parseInt(eElement.getAttribute("size"));

				Element xml_down = (Element) eElement.getElementsByTagName("down").item(0);
				
				this.sprite = buildAnimSprite(size, xml_down);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	public AnimatedSprite buildAnimSprite(int size, Element XML) {
		AnimatedSprite xanim;
		try {
			Field field = SpriteSheet.class.getField(XML.getTextContent());
			Object sprite = field.get(field.getType());
			xanim = new AnimatedSprite((SpriteSheet) sprite, size, size,
					Integer.parseInt(XML.getAttribute("length")));
			return xanim;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void update() {
	}
	
	private void moveSimple() {
	}
	
	public void render(Screen screen) {
		screen.renderProjectile((int)x + xOffset,(int)y + yOffset, this);
		if (Boot.get().devModeOn) screen.drawRect((int)x - 3, (int)y - 9, 5, 5, 0x0093FF, true);
	}
}
