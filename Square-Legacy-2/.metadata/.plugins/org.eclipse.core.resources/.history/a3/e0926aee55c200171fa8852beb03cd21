package com.IB.SL.AlphaLWJGL;

import static org.lwjgl.glfw.GLFW.GLFW_KEY_ESCAPE;
import static org.lwjgl.glfw.GLFW.GLFW_PRESS;
import static org.lwjgl.glfw.GLFW.glfwDestroyWindow;
import static org.lwjgl.glfw.GLFW.glfwSetWindowShouldClose;
import static org.lwjgl.glfw.GLFW.glfwTerminate;

import org.lwjgl.Version;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryUtil.*;

import java.nio.ByteBuffer;
import org.lwjgl.glfw.GLFWVidMode;

public class LWJGL implements Runnable {

	//TODO: Delete this class when done
	String title;
	private boolean running = true;
	private Thread thread;
	
	private long win;
	   
	public LWJGL(String title) {
		this.title = title;
        System.out.println("LWJGL Version " + Version.getVersion() + " is working.");
	}

	public void start() {
		running = true;
		thread = new Thread(this, "SL2");
		thread.start();
	}
	
	public void init() {
		if (!glfwInit()) {
			System.err.println("GLFW failed to initalize..");
			System.exit(1);
		}
		
		glfwWindowHint(GLFW_RESIZABLE, GL_TRUE);
		win = glfwCreateWindow(1280, 720, title, NULL, NULL);
		
		if (win == NULL) {
			System.err.println("Window failed to initialize");
		}
		
		GLFWVidMode vidMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		glfwSetWindowPos(win, 100, 100);
	}
	
	public void render() {
		
	}
	
	public void update() {
		
	}
	
	@Override
	public void run() {
		init();
		while(running) {
			update();
			render();
		}
	}
}